---
# defaults file for fail2ban-versions
fail2ban_version: "0.11"

fail2ban_plugins:
  - wordpress-xmlrpc

# global config
defaults_settings_config:
  ignoreip: "127.0.0.1/8"
  bantime: 86400
  findtime: 600
  maxretry: 5

# config of wordpress-xmlrpc
wordpress-xmlrpc_config:
  enabled: true
  filter: "wordpress-xmlrpc"
  action: "iptables[name=WordPressXMLRPC, port=http, protocol=tcp]"
  logpath: "/var/log/apache2/*.log"
  bantime: 86400
  maxretry: 1

#
# SSH servers
#

# config sshd
sshd_config:
  enabled: true

# To use more aggressive sshd modes set filter parameter "mode" in jail.local:
# normal (default), ddos, extra or aggressive (combines all).
# See "tests/files/logs/sshd" or "filter.d/sshd.conf" for usage example and details.
#mode  : normal
  port   : ssh
  logpath: "%(sshd_log)s"
  backend: "%(sshd_backend)s"


# config dropbear
dropbear_config:
  enabled: true
  port    : ssh
  logpath : "%(dropbear_log)s"
  backend : "%(dropbear_backend)s"


# config selinux-ssh
selinux-ssh_config:
  enabled: true
  port    : ssh
  logpath : "%(auditd_log)s"


#
# HTTP servers
#

# config apache-auth
apache-auth_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"


# config apache-badbots
apache-badbots_config:
  enabled: true
# Ban hosts which agent identifies spammer robots crawling the web
# for email addresses. The mail outputs are buffered.
  port    : http,https
  logpath : "%(apache_access_log)s"
  bantime : 48h
  maxretry: 1


# config apache-noscript
apache-noscript_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"


# config apache-overflows
apache-overflows_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"
  maxretry: 2


# config apache-nohome
apache-nohome_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"
  maxretry: 2

# config apache-botsearch
apache-botsearch_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"
  maxretry: 2

# config apache-fakegooglebot
apache-fakegooglebot_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_access_log)s"
  maxretry: 1
  ignorecommand: "%(ignorecommands_dir)s/apache-fakegooglebot <ip>"


# config apache-modsecurity
apache-modsecurity_config:
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"
  maxretry: 2


# config apache-shellshock
apache-shellshock_config:
  enabled: true
  port   : http,https
  logpath: "%(apache_error_log)s"
  maxretry: 1


# config openhab-auth
openhab-auth_config:
  enabled: true
  filter: openhab
  action: iptables-allports[name=NoAuthFailures]
  logpath: /opt/openhab/logs/request.log


# config nginx-http-auth
nginx-http-auth_config:
  enabled: true
  port   : http,https
  logpath: "%(nginx_error_log)s"

# To use 'nginx-limit-req' jail you should have `ngx_http_limit_req_module` 
# and define `limit_req` and `limit_req_zone` as described in nginx documentation
# http://nginx.org/en/docs/http/ngx_http_limit_req_module.html

nginx-limit-req_config:
  enabled: true
  port   : http,https
  logpath: "%(nginx_error_log)s"

# config nginx-botsearch
nginx-botsearch_config:
  enabled: true
  port    : http,https
  logpath : "%(nginx_error_log)s"
  maxretry: 2

# Ban attackers that try to use PHP's URL-fopen() functionality
# through GET/POST variables. - Experimental, with more than a year
# of usage in production environments.

# config php-url-fopen
php-url-fopen_config:
  enabled: true
  port   : http,https
  logpath: "%(nginx_access_log)s
            %(apache_access_log)s"

# config suhosin
suhosin_config:
  enabled: true
  port   : http,https
  logpath: "%(suhosin_log)s"


# config lighttpd-auth
lighttpd-auth_config:
  enabled: true
# Same as above for Apache's mod_auth
# It catches wrong authentifications
  port   : http,https
  logpath: "%(lighttpd_error_log)s"


#
# Webmail and groupware servers
#

# config roundcube-auth
roundcube-auth_config:
  enabled: true
  port    : http,https
  logpath : "%(roundcube_errors_log)s"
# Use following line in your jail.local if roundcube logs to journal.
#backend: "%(syslog_backend)s"


# config openwebmail
openwebmail_config:
  enabled: true
  port    : http,https
  logpath : /var/log/openwebmail.log


# config horde
horde_config:
  enabled: true
  port    : http,https
  logpath : /var/log/horde/horde.log


# config groupoffice
groupoffice_config:
  enabled: true
  port    : http,https
  logpath : /home/groupoffice/log/info.log


# config sogo-auth
sogo-auth_config:
  enabled: true
  # Monitor SOGo groupware server
  # without proxy this would be:
  # port   : 20000
  port    : http,https
  logpath : /var/log/sogo/sogo.log

# config tine20
tine20_config:
  enabled: true
  logpath : /var/log/tine20/tine20.log
  port    : http,https

#
# Web Applications
#
#

# config drupal-auth
drupal-auth_config:
  enabled: true
  port    : http,https
  logpath : "%(syslog_daemon)s"
  backend : "%(syslog_backend)s"

# config guacamole
guacamole_config:
  enabled: true
  port    : http,https
  logpath : /var/log/tomcat*/catalina.out

# config monit
monit_config:
  enabled: true
  #Ban clients brute-forcing the monit gui login
  port: 2812
  logpath : /var/log/monit

# config webmin-auth
webmin-auth_config:
  enabled: true
  port   : 10000
  logpath: "%(syslog_authpriv)s"
  backend: "%(syslog_backend)s"


# config froxlor-auth
froxlor-auth_config:
  enabled: true
  port   : http,https
  logpath : "%(syslog_authpriv)s"
  backend : "%(syslog_backend)s"


#
# HTTP Proxy servers
#
#

# config squid
squid_config:
  enabled: true
  port    :  80,443,3128,8080
  logpath: /var/log/squid/access.log


# config 3proxy
3proxy_config:
  enabled: true
  port   : 3128
  logpath: /var/log/3proxy.log


#
# FTP servers
#


# config proftpd
proftpd_config:
  enabled: true
  port    : ftp,ftp-data,ftps,ftps-data
  logpath : "%(proftpd_log)s"
  backend : "%(proftpd_backend)s"


# config pure-ftpd
pure-ftpd_config:
  enabled: true
  port    : ftp,ftp-data,ftps,ftps-data
  logpath : "%(pureftpd_log)s"
  backend : "%(pureftpd_backend)s"


# config gssftpd
gssftpd_config:
  enabled: true
  port    : ftp,ftp-data,ftps,ftps-data
  logpath : "%(syslog_daemon)s"
  backend : "%(syslog_backend)s"


# config wuftpd
wuftpd_config:
  enabled: true
  port    : ftp,ftp-data,ftps,ftps-data
  logpath : "%(wuftpd_log)s"
  backend : "%(wuftpd_backend)s"


# config vsftpd
vsftpd_config:
  enabled: true
# or overwrite it in jails.local to be
# logpath: "%(syslog_authpriv)s"
# if you want to rely on PAM failed login attempts
# vsftpd's failregex should match both of those formats
  port    : ftp,ftp-data,ftps,ftps-data
  logpath : "%(vsftpd_log)s"


#
# Mail servers
#


# config [assp# ASSP SMTP Proxy Jail
assp_config:
  enabled: true
  port    : smtp,465,submission
  logpath : /root/path/to/assp/logs/maillog.txt


# config courier-smtp
courier-smtp_config:
  enabled: true
  port    : smtp,465,submission
  logpath : "%(syslog_mail)s"
  backend : "%(syslog_backend)s"


# config postfix
postfix_config:
  enabled: true
# To use another modes set filter parameter "mode" in jail.local:
  mode   : more
  port   : smtp,465,submission
  logpath: "%(postfix_log)s"
  backend: "%(postfix_backend)s"


# config postfix-rbl
postfix-rbl_config:
  enabled: true
  filter  : postfix[mode=rbl]
  port    : smtp,465,submission
  logpath : "%(postfix_log)s"
  backend : "%(postfix_backend)s"
  maxretry: 1


# config sendmail-auth
sendmail-auth_config:
  enabled: true
  port   : submission,465,smtp
  logpath: "%(syslog_mail)s"
  backend: "%(syslog_backend)s"


# config sendmail-reject
sendmail-reject_config:
  enabled: true
# To use more aggressive modes set filter parameter "mode" in jail.local:
# normal (default), extra or aggressive
# See "tests/files/logs/sendmail-reject" or "filter.d/sendmail-reject.conf" for usage example and details.
#mode   : normal
  port    : smtp,465,submission
  logpath : "%(syslog_mail)s"
  backend : "%(syslog_backend)s"


# config qmail-rbl
qmail-rbl_config:
  enabled: true
  filter : qmail
  port   : smtp,465,submission
  logpath: /service/qmail/log/main/current


# dovecot defaults to logging to the mail syslog facility

# config [dovecot# but can be set by syslog_facility in the dovecot configuration.
dovecot_config:
  enabled: true
  port   : pop3,pop3s,imap,imaps,submission,465,sieve
  logpath: "%(dovecot_log)s"
  backend: "%(dovecot_backend)s"


# config sieve
sieve_config:
  enabled: true
  port  : smtp,465,submission
  logpath: "%(dovecot_log)s"
  backend: "%(dovecot_backend)s"


# config solid-pop3d
solid-pop3d_config:
  enabled: true
  port   : pop3,pop3s
  logpath: "%(solidpop3d_log)s"


# config exim
exim_config:
  enabled: true
# see filter.d/exim.conf for further modes supported from filter:
#mode: normal
  port  : smtp,465,submission
  logpath: "%(exim_main_log)s"


# config exim-spam
exim-spam_config:
  enabled: true
  port  : smtp,465,submission
  logpath: "%(exim_main_log)s"


# config kerio
kerio_config:
  enabled: true
  port   : imap,smtp,imaps,465
  logpath: /opt/kerio/mailserver/store/logs/security.log


#
# Mail servers authenticators: might be used for smtp,ftp,imap servers, so
# all relevant ports get banned
#

# config courier-auth
courier-auth_config:
  enabled: true
  port    : smtp,465,submission,imap,imaps,pop3,pop3s
  logpath : "%(syslog_mail)s"
  backend : "%(syslog_backend)s"


# config postfix-sasl
postfix-sasl_config:
  enabled: true
  filter  : postfix[mode=auth]
  port    : smtp,465,submission,imap,imaps,pop3,pop3s
# You might consider monitoring /var/log/mail.warn instead if you are
# running postfix since it would provide the same log lines at the
# "warn" level but overall at the smaller filesize.
  logpath : "%(postfix_log)s"
  backend : "%(postfix_backend)s"


# config perdition
perdition_config:
  enabled: true
  port  : imap,imaps,pop3,pop3s
  logpath: "%(syslog_mail)s"
  backend: "%(syslog_backend)s"


# config squirrelmail
squirrelmail_config:
  enabled: true
  port: smtp,465,submission,imap,imap2,imaps,pop3,pop3s,http,https,socks
  logpath: /var/lib/squirrelmail/prefs/squirrelmail_access_log


# config cyrus-imap
cyrus-imap_config:
  enabled: true
  port  : imap,imaps
  logpath: "%(syslog_mail)s"
  backend: "%(syslog_backend)s"


# config uwimap-auth
uwimap-auth_config:
  enabled: true
  port  : imap,imaps
  logpath: "%(syslog_mail)s"
  backend: "%(syslog_backend)s"


#
#
# DNS servers
#


# !!! WARNING !!!
#   Since UDP is connection-less protocol, spoofing of IP and imitation
#   of illegal actions is way too simple.  Thus enabling of this filter
#   might provide an easy way for implementing a DoS against a chosen
#   victim. See
#    http://nion.modprobe.de/blog/archives/690-fail2ban-+-dns-fail.html
#   Please DO NOT USE this jail unless you know what you are doing.
#
# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks UDP traffic for DNS requests.
# [named-refused-udp]
#
# filter  : named-refused
# port    : domain,953
# protocol: udp
# logpath : /var/log/named/security.log

# IMPORTANT: see filter.d/named-refused for instructions to enable logging
# This jail blocks TCP traffic for DNS requests.

# config named-refused
named-refused_config:
  enabled: true
  port    : domain,953
  logpath : /var/log/named/security.log


# config nsd
nsd_config:
  enabled: true
  port    : 53
  action  : '%(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]'
  logpath: /var/log/nsd.log


#
# Miscellaneous
#

# config asterisk
asterisk_config:
  enabled: true
  port    : 5060,5061
  action  : '%(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]'
  logpath : /var/log/asterisk/messages
  maxretry: 10


# config freeswitch
freeswitch_config:
  enabled: true
  port    : 5060,5061
  action  : '%(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]'
  logpath : /var/log/freeswitch.log
  maxretry: 10


# To log wrong MySQL access attempts add to /etc/my.cnf in [mysqld] or
# equivalent section:
# log-warning: 2
#
# for syslog (daemon facility)
# [mysqld_safe]
# syslog
#
# for own logfile
# [mysqld]

# config [mysqld-auth# log-error=/var/log/mysqld.log
mysqld-auth_config:
  enabled: true
  port    : 3306
  logpath : "%(mysql_log)s"
  backend : "%(mysql_backend)s"



# config [mongodb-auth]# change port when running with "--shardsvr" or "--configsvr" runtime operatio# Log wrong MongoDB auth (for details see filter 'filter.d/mongodb-auth.conf')
# change port when running with "--shardsvr" or "--configsvr" runtime operatio_config:
mongodb-auth_config:
  enabled: true
  port    : 27017
  logpath : /var/log/mongodb/mongodb.log


# Jail for more extended banning of persistent abusers
# !!! WARNINGS !!!
# 1. Make sure that your loglevel specified in fail2ban.conf/.local
#    is not at DEBUG level -- which might then cause fail2ban to fall into
#    an infinite loop constantly feeding itself with non-informative lines
# 2. Increase dbpurgeage defined in fail2ban.conf to e.g. 648000 (7.5 days)

# config [recidive#    to maintain entries for failed logins for sufficient amount of time
recidive_config:
  enabled: true
  logpath : /var/log/fail2ban.log
  banaction: "%(banaction_allports)s"
  bantime : 1w
  findtime: 1d


# Generic filter for PAM. Has to be used with action which bans all
# ports such as iptables-allports, shorewall

# config pam-generic
pam-generic_config:
  enabled: true
# pam-generic filter can be customized to monitor specific subset of 'tty's
  banaction: "%(banaction_allports)s"
  logpath : "%(syslog_authpriv)s"
  backend : "%(syslog_backend)s"


# config xinetd-fail
xinetd-fail_config:
  enabled: true
  banaction: iptables-multiport-log
  logpath  : "%(syslog_daemon)s"
  backend  : "%(syslog_backend)s"
  maxretry : 2



# config [stunnel# stunnel - need to set port for this
stunnel_config:
  enabled: true
  logpath: /var/log/stunnel4/stunnel.log


# config ejabberd-auth
ejabberd-auth_config:
  enabled: true
  port   : 5222
  logpath: /var/log/ejabberd/ejabberd.log


# config counter-strike
counter-strike_config:
  enabled: true
  logpath: /opt/cstrike/logs/L[0-9]*.log
# Firewall: http://www.cstrike-planet.com/faq/6
  tcpport: 27030,27031,27032,27033,27034,27035,27036,27037,27038,27039
  udpport: 1200,27000,27001,27002,27003,27004,27005,27006,27007,27008,27009,27010,27011,27012,27013,27014,27015
  action : '%(banaction)s[name=%(__name__)s-tcp, port="%(tcpport)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(udpport)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]'

# consider low maxretry and a long bantime

# config [nagios# nobody except your own Nagios server should ever probe nrpe
nagios_config:
  enabled: true
  logpath : "%(syslog_daemon)s     ; nrpe.cfg may define a different log_facility"
  backend : "%(syslog_backend)s"
  maxretry: 1


# config oracleims
oracleims_config:
  enabled: true
# see "oracleims" filter file for configuration requirement for Oracle IMS v6 and above
  logpath: /opt/sun/comms/messaging64/log/mail.log_current
  banaction: "%(banaction_allports)s"

# config directadmin
directadmin_config:
  enabled: true
  logpath: /var/log/directadmin/login.log
  port: 2222

# config portsentry
portsentry_config:
  enabled: true
  logpath : /var/lib/portsentry/portsentry.history
  maxretry: 1

# config pass2allow-ftp
pass2allow-ftp_config:
  enabled: true
# this pass2allow example allows FTP traffic after successful HTTP authentication
  port        : ftp,ftp-data,ftps,ftps-data
# knocking_url variable must be overridden to some secret value in jail.local
  knocking_url: /knocking/
  filter      : apache-pass[knocking_url="%(knocking_url)s"]
# access log of the website with HTTP auth
  logpath     : "%(apache_access_log)s"
  blocktype   : RETURN
  returntype  : DROP
  action      : "%(action_)s[blocktype=%(blocktype)s, returntype=%(returntype)s]"
  bantime     : 1h
  maxretry    : 1
  findtime    : 1


# config murmur
murmur_config:
  enabled: true
# AKA mumble-server
  port    : 64738
  action  : '%(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol=tcp, chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol=udp, chain="%(chain)s", actname=%(banaction)s-udp]'
  logpath : /var/log/mumble-server/mumble-server.log


# config slapd
slapd_config:
  enabled: true
  port   : ldap,ldaps
  logpath: /var/log/slapd.log

# config domino-smtp
domino-smtp_config:
  enabled: true
  port   : smtp,ssmtp
logpath: /home/domino01/data/IBM_TECHNICAL_SUPPORT/console.log

# config phpmyadmin-syslog
phpmyadmin-syslog_config:
  enabled: true  
  port: http,https
  logpath:  "%(syslog_authpriv)s"
  backend: "%(syslog_backend)s"

# config zoneminder
zoneminder_config:
  # Zoneminder HTTP/HTTPS web interface auth
  # Logs auth failures to apache2 error log
  enabled: true
  port    : http,https
  logpath : "%(apache_error_log)s"

